/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   aux_func.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/11 10:17:04 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/16 17:03:26 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

void	print_stack(t_stack **a)
{
	t_stack	*b;

	b = *a;
	while (b != NULL)
	{
		printf("%d ", *(int *)b->content);
		b = b->next;
	}
}

void	print_list(t_list **a)
{
	t_list	*b;

	b = *a;
	while (b != NULL)
	{
		printf("%d ", *(int *)b->content);
		b = b->next;
	}
}

void	indexer(t_stack **a2, t_stack **solved)
{
	t_stack	*solving;
	t_stack	*a;
	int		index;
	int		*new_ind;

	a = *a2;
	while (a)
	{
		index = 1;
		solving = *solved;
		while (*(int *)a->content != *(int *)solving->content)
		{
			solving = solving->next;
			index++;
		}
		new_ind = malloc(sizeof(int));
		*new_ind = index;
		a->content = new_ind;
		a = a->next;
	}
}

void	indexer2(t_stack **solved2)
{
	t_stack	*solved;
	int		index;
	int		*new_ind;

	index = 1;
	solved = *solved2;
	while (solved)
	{
		new_ind = malloc(sizeof(int));
		*new_ind = index;
		solved->content = new_ind;
		solved = solved->next;
		index++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   lazy_mover.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/20 10:36:22 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/24 15:08:39 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

int	get_node_index(t_stack *a, t_stack *target)
{
	int	i;

	i = 0;
	while (a)
	{
		if (a == target)
			return (i);
		a = a->next;
		i++;
	}
	return (-1);
}

void	move_cheapest_a2b(t_stack **a, t_stack **b, t_list *lis)
{
	t_stack	*target;
	int		indexb;

	update_cost(*a, *b, lis);
	target = cheapest_node(*a);
	if (!target)
		return ;
	indexb = find_index(*b, *(int *)target->content);
	rotation_judge_a2b(a, b, get_node_index(*a, target), indexb);
}

int	notmembers_of_lis(t_stack *a, t_list *lis)
{
	int	count;

	count = 0;
	while (a)
	{
		if (!is_in_the_lis_list(lis, (int *)a->content))
			count++;
		a = a->next;
	}
	return (count);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   lazy_unmover.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 14:46:37 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/27 14:12:49 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

void	rotation_judge_b2a(t_stack **a, t_stack **b, int indexa, int indexb)
{
	int	siza;
	int	sizb;
	int	offseta;
	int	offsetb;

	siza = ft_stacksize(*a);
	sizb = ft_stacksize(*b);
	offseta = indexa;
	if ((indexa > siza / 2))
		offseta = (abs(indexa - siza)) * -1;
	offsetb = indexb;
	if ((indexb > sizb / 2))
		offsetb = (abs(indexb - sizb)) * -1;
	rr_sop_multi(a, b, &offseta, &offsetb);
	r_sop_multi(a, b, &offseta, &offsetb);
	//p_op(b, a, 'a');
}

// static int	find_pos_index(t_stack *a, int value)
// {
// 	int		index;
// 	t_stack	*curr;

// 	index = 0;
// 	curr = a;
// 	while (curr->next)
// 	{
// 		if (*(int *)curr->content > value
//			&& *(int *)curr->next->content < value)
// 			return (index + 1);
// 		curr = curr->next;
// 		index++;
// 	}
// 	return (0);
// }

// static void	reset_cost(t_stack *stack)
// {
// 	while (stack)
// 	{
// 		stack->cost = 0;
// 		stack = stack->next;
// 	}
// }

// void	move_cheapest_b2a(t_stack **a, t_stack **b, t_list *lis)
// {
// 	t_stack	*target;
// 	int		indexa;
// 	int		indexb;

// 	rotate_to_the_top(*a, *b);
// }

int	rotate_to_min(t_stack *target)
{
	int min;

	min = *(int *)target->content;
	while (target)
	{
		if (min > *(int *)(target)->content)
			min = *(int*)target->content;
		target = target->next;
	}
	return (min);
}
int rotate_to_max(t_stack *s)
{
    int     idx = 0;
    int     max_idx = 0;
    int     max_val;
    t_stack *cur = s;

    if (!cur)
        return 0;
    max_val = *(int*)cur->content;
    while (cur)
    {
        if (*(int*)cur->content > max_val)
        {
            max_val = *(int*)cur->content;
            max_idx = idx;
        }
        cur = cur->next;
        idx++;
    }
    return max_idx;
}

// int rotate_to_max(t_stack *target)
// {
// 	int	max;

// 	max = *(int*)target;
// 	while (target)
// 	{
// 		if (max < *(int *)(target)->content)
// 			max = *(int*)target->content;
// 		target = target->next;
// 	}
// 	return (max);
// }

void	move_cheapest_b2a(t_stack **a, t_stack **b, t_list *lis)
{
	int indexa;
	int indexb;

	indexa = find_index(*a, rotate_to_min(*a));
	indexb = find_index(*b, rotate_to_max(*b));
	rotation_judge_b2a(a, b, indexa, indexb);
	lis = NULL;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   LIS_list.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/16 14:35:34 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/24 15:17:44 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

static int	*stack_to_arr_conversion(t_stack *stack)
{
	int	*arr;
	int	i;
	int	size;

	size = ft_stacksize(stack);
	arr = malloc(sizeof(int) * size);
	if (!arr)
		return (NULL);
	i = 0;
	while (stack && i < size)
	{
		arr[i] = *(int *)stack->content;
		stack = stack->next;
		i++;
	}
	return (arr);
}

static int	fill_prev(int *prev, int *tails, int start, int i)
{
	if (start > 0)
		prev[i] = tails[start - 1];
	else
		prev[i] = -1;
	return (i);
}

static int	fill_arr(int *arr, int *tails, int *prev, int size)
{
	int	i;
	int	start;
	int	end;
	int	meio;
	int	lis_len;

	i = -1;
	lis_len = 0;
	while (++i < size)
	{
		start = 0;
		end = lis_len;
		while (start < end)
		{
			meio = (start + end) / 2;
			if (arr[tails[meio]] < arr[i])
				start = meio + 1;
			else
				end = meio;
		}
		if (start == lis_len)
			lis_len++;
		tails[end] = fill_prev(prev, tails, start, i);
	}
	return (lis_len);
}

static t_list	*write_list(int *arr, int *prev, int last_index)
{
	t_list	*list;
	int		*val;

	list = NULL;
	while (last_index >= 0)
	{
		val = malloc(sizeof(int));
		if (!val)
			break ;
		*val = arr[last_index];
		ft_lstadd_front(&list, ft_lstnew(val));
		last_index = prev[last_index];
	}
	return (list);
}

t_list	*lis_tractor(t_stack *stack)
{
	int		*arr;
	int		*tails;
	int		*prev;
	int		lis_len;
	t_list	*lis;

	arr = stack_to_arr_conversion(stack);
	tails = malloc(sizeof(int) * ft_stacksize(stack));
	prev = malloc(sizeof(int) * ft_stacksize(stack));
	if (!arr || !tails || !prev)
		return (NULL);
	lis_len = fill_arr(arr, tails, prev, ft_stacksize(stack));
	lis = write_list(arr, prev, tails[lis_len - 1]);
	free(arr);
	free(tails);
	free(prev);
	return (lis);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   non_PS_solver.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/11 10:03:42 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/24 15:13:40 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

t_stack	*non_ps_solver(t_stack **a)
{
	int		value;
	t_stack	*sorted;
	t_stack	*a2;
	t_stack	*new_node;

	sorted = NULL;
	a2 = *a;
	while (a2)
	{
		value = *(int *)a2->content;
		new_node = ft_stack_newnode(value);
		sorted = put_into_stack(sorted, new_node);
		a2 = a2->next;
	}
	return (sorted);
}

t_stack	*put_into_stack(t_stack *sorted, t_stack *node)
{
	int		sorting;
	t_stack	*stop;

	sorting = *(int *)node->content;
	if (!sorted || sorting < *(int *)sorted->content)
	{
		node->next = sorted;
		if (sorted)
			sorted->prev = node;
		node->prev = NULL;
		return (node);
	}
	stop = sorted;
	while (stop->next && *(int *)stop->next->content < sorting)
		stop = stop->next;
	node->next = stop->next;
	if (stop->next)
		stop->next->prev = node;
	stop->next = node;
	node->prev = stop;
	return (sorted);
}

t_stack	*ft_stack_newnode(int currNBR)
{
	t_stack	*s;
	int		*ptr;

	s = malloc(sizeof(t_stack));
	ptr = malloc(sizeof(int));
	if (!s || !ptr)
		return (NULL);
	*ptr = currNBR;
	s->content = ptr;
	s->next = NULL;
	s->prev = NULL;
	return (s);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ops.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/01 17:44:17 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/18 16:42:32 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

void	s_op(t_stack **lst, char is_a)
{
	t_stack	*temp;
	t_stack	*temp2;
	void	*rando;

	if (!lst || !*lst || !((*lst)->next))
		return ;
	temp = *lst;
	temp2 = temp->next;
	rando = temp->content;
	temp->content = temp2->content;
	temp2->content = rando;
	if (is_a)
		ft_printf("s%c\n", is_a);
}

void	p_op(t_stack **from, t_stack **to, char is_a)
{
	t_stack	*tempa;

	if (!(*from))
		return ;
	tempa = *from;
	*from = (*from)->next;
	if (*from)
		(*from)->prev = NULL;
	tempa->next = *to;
	if (*to)
		(*to)->prev = tempa;
	tempa->prev = NULL;
	*to = tempa;
	if (is_a)
		ft_printf("p%c\n", is_a);
}

void	r_op(t_stack **a, char is_a)
{
	t_stack	*first;
	t_stack	*second;

	if (!a || !(*a) || !((*a)->next))
		return ;
	first = *a;
	*a = (*a)->next;
	(*a)->prev = NULL;
	second = *a;
	while (second->next)
		second = second->next;
	second->next = first;
	first->prev = second;
	first->next = NULL;
	if (is_a)
		ft_printf("r%c\n", is_a);
}

void	rr_op(t_stack **a, char is_a)
{
	t_stack	*last;

	if (!a || !(*a) || !((*a)->next))
		return ;
	last = *a;
	while (last->next)
		last = last->next;
	if (last->prev)
		last->prev->next = NULL;
	last->prev = NULL;
	last->next = *a;
	(*a)->prev = last;
	*a = last;
	if (is_a)
		ft_printf("rr%c\n", is_a);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parsing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/23 14:56:05 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/25 15:30:31 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

static bool	is_aldigit(char *s)
{
	int	i;

	i = 0;
	while (s[i])
	{
		if (s[i] == ' ')
		{
			i++;
			continue ;
		}
		if (s[i] == '-' || s[i] == '+')
		{
			if ((i > 0 && s[i - 1] != ' ') || !ft_isdigit(s[i + 1]))
				return (false);
			i++;
		}
		if (!ft_isdigit(s[i]))
			return (false);
		while (ft_isdigit(s[i]))
			i++;
	}
	return (true);
}

bool	valid_input(char **argv)
{
	int		j;

	j = 1;
	while (argv[j])
	{
		if (!is_aldigit(argv[j]))
			return (false);
		j++;
	}
	return (true);
}

static int	arr_len(char **ar)
{
	int	i;
	int	count;

	i = 0;
	count = 1;
	while (ar[i])
	{
		count += ft_strlen(ar[i]);
		i++;
		count++;
	}
	return (count);
}

char	*join_args(char **argv)
{
	int		i;
	int		j;
	int		s;
	char	*str;

	str = malloc(sizeof(char) * arr_len(argv));
	j = 1;
	s = 0;
	while (argv[j])
	{
		i = 0;
		while (argv[j][i] != '\0')
		{
			if (argv[j][i] == ' ')
				str[s] = '|';
			else
				str[s] = argv[j][i];
			s++;
			i++;
		}
		str[s++] = '|';
		j++;
	}
	str[s - 1] = '\0';
	return (str);
}

t_stack	*string_to_stack(char **slitted)
{
	t_stack	*node;
	t_stack	*head;
	int		k;
	int		*i;

	node = NULL;
	head = NULL;
	k = 0;
	while (slitted[k] != NULL)
	{
		i = malloc(sizeof(int));
		*i = ft_atoi(slitted[k]);
		node = ft_stacknew(i);
		ft_stackadd_back(&head, node);
		k++;
	}
	return (head);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   sim_cost.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/19 17:32:30 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/25 15:28:58 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

static int	sim_rotation_judge(t_stack *b, int index)
{
	int	size;

	size = ft_stacksize(b);
	if (index <= size / 2)
		return (index);
	else
		return (size - index);
}

void	update_cost(t_stack *a, t_stack *b, t_list *lis)
{
	t_stack	*curr;
	int		indexa;
	int		indexb;
	int		costa;
	int		costb;

	curr = a;
	indexa = 0;
	while (curr)
	{
		if (is_in_the_lis_list(lis, (int *)curr->content))
			curr->cost = INT_MAX - 1;
		else
		{
			costa = sim_rotation_judge(a, indexa);
			indexb = find_index(b, *(int *)curr->content);
			costb = sim_rotation_judge(b, indexb);
			curr->cost = costa + costb + 1;
		}
		curr = curr->next;
		indexa++;
	}
}

t_stack	*cheapest_node(t_stack *a)
{
	t_stack	*min_node;

	min_node = NULL;
	while (a)
	{
		if (a->cost != INT_MAX && (!min_node || a->cost < min_node->cost))
			min_node = a;
		a = a->next;
	}
	return (min_node);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   solver.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/16 11:14:48 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/25 15:44:45 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

int	abs(int x)
{
	if (x < 0)
		return (x * -1);
	return (x);
}

int	find_index(t_stack *b, int value)
{
	t_stack	*temp;
	int		index;
	int		curr;
	int		next;

	if (!b || !b->next)
		return (0);
	index = 0;
	temp = b;
	while (temp->next)
	{
		curr = *(int *)temp->content;
		next = *(int *)temp->next->content;
		if (curr >= value && value >= next)
			return (index + 1);
		else if (curr < next && (value >= next || value <= curr))
			return (index + 1);
		index++;
		temp = temp->next;
	}
	return (0);
}

void	rr_sop_multi(t_stack **a, t_stack **b, int *indexa, int *indexb)
{
	while (*indexa < 0 && *indexb < 0)
	{
		rrr_sop(a, b, "rr");
		(*indexa)++;
		(*indexb)++;
	}
	while (*indexa < 0)
	{
		rr_op(a, 'a');
		(*indexa)++;
	}
	while (*indexb < 0)
	{
		rr_op(b, 'b');
		(*indexb)++;
	}
}

void	r_sop_multi(t_stack **a, t_stack **b, int *indexa, int *indexb)
{
	while (*indexa > 0 && *indexb > 0)
	{
		rr_sop(a, b, "r");
		(*indexa)--;
		(*indexb)--;
	}
	while (*indexa > 0)
	{
		r_op(a, 'a');
		(*indexa)--;
	}
	while (*indexb > 0)
	{
		r_op(b, 'b');
		(*indexb)--;
	}
}

void rotation_judge_a2b(t_stack **a, t_stack **b, int indexa, int indexb)
{
	int	siza;
	int	sizb;
	int	offseta;
	int	offsetb;

	siza = ft_stacksize(*a);
	sizb = ft_stacksize(*b);
	offseta = indexa;
	if ((indexa > siza / 2))
		offseta = (abs(indexa - siza)) * -1;
	offsetb = indexb;
	if ((indexb > sizb / 2))
		offsetb = (abs(indexb - sizb)) * -1;
	rr_sop_multi(a, b, &offseta, &offsetb);
	r_sop_multi(a, b, &offseta, &offsetb);
	p_op(a, b, 'b');
}

int	is_in_the_lis_list(t_list *lis, int *val)
{
	if (!lis)
		return (0);
	while (lis)
	{
		if (*(int *)lis->content == *val)
			return (1);
		lis = lis->next;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   sops.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/11 09:54:38 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/16 17:11:18 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"

void	ss_sop(t_stack **a, t_stack **b)
{
	s_op(a, 0);
	s_op(b, 0);
	ft_printf("ss\n");
}

void	rr_sop(t_stack **a, t_stack **b, char *print)
{
	r_op(a, 0);
	r_op(b, 0);
	if (print)
		ft_printf("r%s\n", print);
}

void	rrr_sop(t_stack **a, t_stack **b, char *print)
{
	rr_op(a, 0);
	rr_op(b, 0);
	if (print)
		ft_printf("r%s\n", print);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   testing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/11 10:04:22 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/01 10:17:36 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "aux_func.h"
#include "stdlib.h"

t_list	*list_lis(t_stack *stack)
{
	t_list	*node;
	int		k;
	t_list	*lis;

	lis = NULL;
	node = NULL;
	k = 0;
	while (k < ft_stacksize(stack))
	{
		node = lis_tractor(stack);
		if (ft_lstsize(node) > ft_lstsize(lis))
		{
			lis = node;
		}
		r_op(&stack, 0);
		k++;
	}
	return (lis);
}

int	check_stack_status(t_stack *a, int is_reverse)
{
	int	k;

	k = 0;
	while (a->next != NULL || k < ft_stacksize(a) + 1)
	{
		if (is_reverse)
		{
			if (*(int *)a->content < *(int *)a->next->content)
				return (0);
		}
		else
		{
			if (*(int *)a->content > *(int *)a->next->content)
				return (0);
		}
		a = a->next;
		k++;
	}
	return (1);
}

int	last_val(t_stack *a)
{
	t_stack	*target;

	target = a;
	if (target->next)
	{
		while (target->next)
		{
			target = target->next;
		}
		return (*(int *)target->content);
	}
	else
		return (*(int *)target->content);
}

void	all_to_a(t_stack **a, t_stack **b)
{
	int	i;
	int	bval;

	i = last_val(*a);
	bval = *(int *)(*b)->content;
	if (bval == *(int *)(*a)->content - 1)
		p_op(b, a, 'a');
	else
		rr_op(a, 'a');
}

int	does_b_exist(t_stack *b)
{
	if (b || b->next)
		return (1);
	return (0);
}
void	breakpoint(void)
{
	return ;
}

int	check_b(t_stack *b)
{
	t_stack	*temp;

	temp = b;
	while (temp->prev)
		temp = temp->prev;
	if (temp->next)
		return (0);
	else
		return (1);
}

int	main(int argc, char **argv)
{
	t_stack	*a;
	t_stack	*b;
	t_stack	*solved;
	t_list	*lis;
	int		i;

	a = NULL;
	b = NULL;
	solved = NULL;
	lis = NULL;
	if (!valid_input(argv) || argc == 1)
	{
		if (argc == 1)
			return (-1);
		ft_printf("Error\n");
		return (1);
	}
	a = string_to_stack(ft_split(join_args(argv), '|'));
	solved = non_ps_solver(&a);
	indexer(&a, &solved);
	indexer2(&solved);
	lis = list_lis(a);
	// print_list(&lis);
	// printf("\n");
	while (notmembers_of_lis(a, lis) > 0)
		move_cheapest_a2b(&a, &b, lis);
	while (!(check_stack_status(a, 0)))
		move_cheapest_b2a(&a, &b, lis);
	while (!(check_stack_status(b, 1)))
		r_op(&b, 'b');
	// breakpoint();
	i = 0;
	if (last_val(a) < *(int *)b->content)
		p_op(&b, &a, 'a');
	while (b)
	{
		all_to_a(&a, &b);
		i++;
	}
	// p_op(&b, &a, 'a');
	// print_list(&lis);
	// printf("\n");
	// print_stack(&b);
	// while (b)
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   aux_func.h                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/01 17:45:31 by pfreire-          #+#    #+#             */
/*   Updated: 2025/06/24 15:27:47 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef AUX_FUNC_H
# define AUX_FUNC_H

# include "lib/libft.h"

// Auxiliary Functions
void	print_stack(t_stack **a);
void	indexer(t_stack **a2, t_stack **solved);
void	indexer2(t_stack **solved2);
void	print_list(t_list **a);

// Non-PS Solver
t_stack	*non_ps_solver(t_stack **a);
t_stack	*put_into_stack(t_stack *sorted, t_stack *node);
t_stack	*ft_stack_newnode(int currNBR);

// Lazy Mover
int		get_node_index(t_stack *a, t_stack *target);
void	move_cheapest_a2b(t_stack **a, t_stack **b, t_list *LIS);
int		notmembers_of_lis(t_stack *a, t_list *LIS);

// Lazy Unmover
void	rotation_judge_b2a(t_stack **a, t_stack **b, int indexa, int indexb);
void	move_cheapest_b2a(t_stack **a, t_stack **b, t_list *LIS);

// LIS list
t_list	*lis_tractor(t_stack *stack);

// Push Swap Operations
void	s_op(t_stack **lst, char is_a);
void	p_op(t_stack **from, t_stack **to, char is_a);
void	r_op(t_stack **a, char is_a);
void	rr_op(t_stack **a, char is_a);

// Push Swap Simultaneous Operations
void	ss_sop(t_stack **a, t_stack **b);
void	rr_sop(t_stack **a, t_stack **b, char *print);
void	rrr_sop(t_stack **a, t_stack **b, char *print);

// Parsing Functions
bool	valid_input(char **argv);
char	*join_args(char **argv);
t_stack	*string_to_stack(char **slitted);

// Cost Simulation Functions
void	update_cost(t_stack *a, t_stack *b, t_list *lis);
t_stack	*cheapest_node(t_stack *a);

// Solver Functions
int		find_index(t_stack *b, int value);
void	rr_sop_multi(t_stack **a, t_stack **b, int *indexa, int *indexb);
void	r_sop_multi(t_stack **a, t_stack **b, int *indexa, int *indexb);
void	rotation_judge_a2b(t_stack **a, t_stack **b, int indexa, int indexb);
int		is_in_the_lis_list(t_list *lis, int *val);

#endif
