/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   aux_func.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42lisboa.com>   +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/22 12:01:44 by pfreire-          #+#    #+#             */
/*   Updated: 2025/08/22 12:18:46 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	ft_atoi(const char *s)
{
	int	i;
	int	signal;
	int	result;

	i = 0;
	result = 0;
	signal = 1;
	while ((s[i] && s[i] == ' ') || (s[i] >= 9 && s[i] <= 13))
		i++;
	if (s[i] == '-')
	{
		signal = -1;
		i++;
	}
	else if (s[i] == '+')
		i++;
	if (!(s[i] >= '0' && s[i] <= '9'))
		return (0);
	while (s[i] != '\0' && (s[i] >= '0' && s[i] <= '9'))
	{
		result *= 10;
		result += (s[i] - '0');
		i++;
	}
	return (result * signal);
}

bool	is_only_nbr(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
	{
		if (str[i] < 48 || str[i] > 57)
			return (false);
		i++;
	}
	return (true);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42lisboa.com>   +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/26 12:33:41 by pfreire-          #+#    #+#             */
/*   Updated: 2025/08/27 18:15:26 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

unsigned long	time_stamp(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}

unsigned int	get_clock(t_table *table)
{
	return (time_stamp() - table->start_time);
}

void	msleep(t_philo *philo, unsigned long int a)
{
	unsigned long int	i;
	int	morti;

	i = 0;
	while (i < a)
	{
		pthread_mutex_lock(&philo->table->memento_lock);
		morti = philo->table->memento_mori;
		pthread_mutex_unlock(&philo->table->memento_lock);
		if (morti != 0)
			break ;
		usleep(1000);
		i++;
	}
}

int	safe_print(t_philo *philo, const char *msg)
{
	if(philo->table->memento_mori !=0)
		return(0);
	pthread_mutex_lock(&philo->table->memento_lock);
	pthread_mutex_lock(&philo->table->print_lock);
	if (philo->table->memento_mori == 0)
		printf("%u %d %s\n", get_clock(philo->table), philo->id, msg);
	pthread_mutex_unlock(&philo->table->print_lock);
	pthread_mutex_unlock(&philo->table->memento_lock);
	return (0);
}

void	*grim_reaper(void *arg)
{
	t_table				*table;
	int					i;
	unsigned long int	now;
	int					j;

	table = (t_table *)arg;
	while (table->memento_mori == 0)
	{
		usleep(200);
		now = get_clock(table);
		i = 0;
		j = 0;
		while (i < table->philo_nbr)
		{
			pthread_mutex_lock(&table->memento_lock);
			pthread_mutex_lock(&table->philo[i].clairvoyant);
			if (now >= table->philo[i].death_time)
			{
				table->memento_mori = table->philo[i].id;
				pthread_mutex_lock(&table->print_lock);
				printf("%lu %d has died\n", now, table->philo[i].id);
				pthread_mutex_unlock(&table->print_lock);
				pthread_mutex_unlock(&table->philo[i].clairvoyant);
				pthread_mutex_unlock(&table->memento_lock);
				return (NULL);
			}
			if (table->cycles == table->philo[i].meals)
				j++;
			pthread_mutex_unlock(&table->philo[i].clairvoyant);
			pthread_mutex_unlock(&table->memento_lock);
			i++;
		}
		if (j == table->philo_nbr)
			return (NULL);
	}
	return (NULL);
}

void	cogito_ergo_sum(t_table *table, char **argv)
{
	int	i;

	table->memento_mori = 0;
	table->philo_nbr = atoi(argv[1]);
	table->life_time = atoi(argv[2]) * 1000;
	table->eat_time = atoi(argv[3]) * 1000;
	table->sleep_time = atoi(argv[4]) * 1000;
	table->cycles = -1;
	if (argv[5])
		table->cycles = atoi(argv[5]);
	table->forks = malloc(sizeof(pthread_mutex_t) * table->philo_nbr);
	i = 0;
	while (i < table->philo_nbr)
	{
		pthread_mutex_init(&table->forks[i], NULL);
		i++;
	}
	pthread_mutex_init(&table->print_lock, NULL);
	pthread_mutex_init(&table->memento_lock, NULL);
}

void	get_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		pthread_mutex_lock(&philo->table->forks[philo->left_fork]);
		safe_print(philo, "has taken a right fork");
		pthread_mutex_lock(&philo->table->forks[philo->right_fork]);
		safe_print(philo, "has taken a left fork");
		safe_print(philo, "is Eating");
	}
	else
	{
		pthread_mutex_lock(&philo->table->forks[philo->right_fork]);
		safe_print(philo, "has taken a right fork");
		pthread_mutex_lock(&philo->table->forks[philo->left_fork]);
		safe_print(philo, "has taken a left fork");
		safe_print(philo, "is Eating");
	}
}

void	drop_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		pthread_mutex_unlock(&philo->table->forks[philo->right_fork]);
		safe_print(philo, "has dropped a right fork");
		pthread_mutex_unlock(&philo->table->forks[philo->left_fork]);
		safe_print(philo, "has dropped a left fork");
	}
	else
	{
		pthread_mutex_unlock(&philo->table->forks[philo->left_fork]);
		safe_print(philo, "has dropped a left fork");
		pthread_mutex_unlock(&philo->table->forks[philo->right_fork]);

		safe_print(philo, "has dropped a right fork");
	}
}

void	*existance(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	if (philo->id % 2 == 0)
		usleep(philo->table->eat_time / 2);
	pthread_mutex_lock(&philo->table->memento_lock);
	while (philo->table->memento_mori == 0)
	{
		pthread_mutex_unlock(&philo->table->memento_lock);
		get_forks(philo);
		philo->meals++;
		pthread_mutex_lock(&philo->clairvoyant);
		philo->death_time = get_clock(philo->table) + philo->table->life_time
			/ 1000;
		if (philo->meals == philo->table->cycles)
			return (pthread_mutex_unlock(&philo->clairvoyant),
				drop_forks(philo), NULL);
		pthread_mutex_unlock(&philo->clairvoyant);
		msleep(philo, philo->table->eat_time);
		drop_forks(philo);
		safe_print(philo, "is Sleeping");
		msleep(philo, philo->table->sleep_time);
		safe_print(philo, "is Thinking");
		msleep(philo, (2 * philo->table->eat_time) - philo->table->sleep_time);
		pthread_mutex_lock(&philo->table->memento_lock);
	}
	pthread_mutex_unlock(&philo->table->memento_lock);
	return (NULL);
}

void	start_philo(t_table *table)
{
	int	i;

	i = 0;
	table->philo = calloc(table->philo_nbr, sizeof(t_philo));
	while (i < table->philo_nbr)
	{
		table->philo[i].thread = malloc(sizeof(pthread_t));
		if (!table->philo[i].thread)
			return ;
		pthread_mutex_init(&table->philo[i].clairvoyant, NULL);
		table->philo[i].id = i + 1;
		table->philo[i].table = table;
		table->philo[i].left_fork = i;
		table->philo[i].meals = 0;
		table->philo[i].right_fork = (i + 1) % table->philo_nbr;
		pthread_mutex_lock(&table->philo[i].clairvoyant);
		table->philo[i].death_time = get_clock(table) + table->life_time / 1000;
		pthread_mutex_unlock(&table->philo[i].clairvoyant);
		pthread_create(table->philo[i].thread, NULL, existance,
			(void *)&table->philo[i]);
		i++;
	}
	// table->memento_mori = 0;
}

void	cleanup(t_table *table)
{
	int	i;

	i = 0;
	if (!table)
		return ;
	while (i < table->philo_nbr)
	{
		pthread_mutex_destroy(&table->forks[i]);
		pthread_mutex_destroy(&table->philo[i].clairvoyant);
		free(table->philo[i].thread);
		i++;
	}
	pthread_mutex_destroy(&table->print_lock);
	pthread_mutex_destroy(&table->memento_lock);
	free(table->forks);
	free(table->philo);
	free(table);
}

bool	only_nbrs(char *a)
{
	int	i;

	i = 0;
	while (a[i] != '\0')
	{
		if (a[i] > '9' || a[i] < '0')
			return (false);
		i++;
	}
	return (true);
}

bool	isvalid(char **argv)
{
	if (!only_nbrs(argv[1]))
		return (false);
	if (!only_nbrs(argv[2]))
		return (false);
	if (!only_nbrs(argv[3]))
		return (false);
	if (!only_nbrs(argv[4]))
		return (false);
	if (argv[5] && !only_nbrs(argv[5]))
		return (false);
	return (true);
}

int	main(int argc, char **argv)
{
	t_table	*table;
	int		i;

	if ((argc < 5 || argc > 6) || !isvalid(argv))
		return (printf("Wrong args\n"), 0);
	table = malloc(sizeof(t_table));
	table->start_time = time_stamp();
	cogito_ergo_sum(table, argv);
	start_philo(table);
	i = 0;
	pthread_create(&table->grim_reaper, NULL, grim_reaper, (void *)table);
	pthread_join(table->grim_reaper, NULL);
	while (i < table->philo_nbr)
	{
		pthread_join(*table->philo[i].thread, NULL);
		i++;
	}
	cleanup(table);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42lisboa.com>   +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/21 12:31:18 by pfreire-          #+#    #+#             */
/*   Updated: 2025/08/27 15:35:45 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PHILO_H
# define PHILO_H

# include <pthread.h>
# include <stdbool.h>
# include <stdio.h>
# include <stdlib.h>
# include <string.h>
# include <sys/time.h>
# include <unistd.h>

typedef struct s_table	t_table;

typedef struct s_philo
{
	int					id;
	pthread_t			*thread;
	t_table				*table;
	int					left_fork;
	int					right_fork;
	unsigned long int	death_time;
	pthread_mutex_t		clairvoyant;
	int	meals;
}						t_philo;

typedef struct s_table
{
	t_philo				*philo;
	pthread_mutex_t		*forks;
	pthread_mutex_t		print_lock;
	pthread_mutex_t		memento_lock;
	int					philo_nbr;
	int					eat_time;
	int					think_time;
	int					sleep_time;
	int					life_time;
	int					cycles;
	unsigned long int	start_time;
	int					memento_mori;
	pthread_t			grim_reaper;

}						t_table;

bool					is_only_nbr(char *str);
int						ft_atoi(const char *s);
#endif
