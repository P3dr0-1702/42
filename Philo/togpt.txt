/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   aux_func.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42lisboa.com>   +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/22 12:01:44 by pfreire-          #+#    #+#             */
/*   Updated: 2025/08/22 12:18:46 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	ft_atoi(const char *s)
{
	int	i;
	int	signal;
	int	result;

	i = 0;
	result = 0;
	signal = 1;
	while ((s[i] && s[i] == ' ') || (s[i] >= 9 && s[i] <= 13))
		i++;
	if (s[i] == '-')
	{
		signal = -1;
		i++;
	}
	else if (s[i] == '+')
		i++;
	if (!(s[i] >= '0' && s[i] <= '9'))
		return (0);
	while (s[i] != '\0' && (s[i] >= '0' && s[i] <= '9'))
	{
		result *= 10;
		result += (s[i] - '0');
		i++;
	}
	return (result * signal);
}

bool	is_only_nbr(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
	{
		if (str[i] < 48 || str[i] > 57)
			return (false);
		i++;
	}
	return (true);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42lisboa.com>   +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/26 12:33:41 by pfreire-          #+#    #+#             */
/*   Updated: 2025/08/26 12:36:39 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

unsigned long time_stamp(void)
{
	struct timeval tv;
	gettimeofday(&tv, NULL);
	return(tv.tv_sec * 100 + tv.tv_usec / 1000);
} 

void *grim_reaper(void *arg)
{
	t_table *table = (t_table *)arg;
	while(table->memento_mori != 0)
	{
		usleep(1000);
		table->clock++;
		int i = 0;
		while(i < table->philo_nbr)
		{
			if(table->clock >= table->philo[i].death_time)
			{
				printf("Philoshopher %d died\n", table->philo[i].id);
				table->memento_mori = table->philo[i].id;
				return(NULL);
			}
			i++;
		}
	}
	return(NULL);
}

void	cogito_ergo_sum(t_table *table, char **argv)
{
	int	i;

	table->memento_mori = 0;
	table->philo_nbr = atoi(argv[1]) * 1000;
	table->life_time = atoi(argv[2]) * 1000;
	table->eat_time = atoi(argv[3]) * 1000;
	table->sleep_time = atoi(argv[4]) * 1000;
	table->cycles = -1;
	if (argv[5])
		table->cycles = atoi(argv[5]);
	table->forks = malloc(sizeof(pthread_mutex_t) * table->philo_nbr);
	i = 0;
	while (i < table->philo_nbr)
	{
		pthread_mutex_init(&table->forks[i], NULL);
		i++;
	}
}

void	*existance(void *arg)
{
	t_philo	*philo;
	void	*mall;

	philo = (t_philo *)arg;
	while (philo->table->memento_mori == 0)
	{
		if (philo->id % 2 == 0)
		{
			pthread_mutex_lock(&philo->table->forks[philo->left_fork]);
			pthread_mutex_lock(&philo->table->forks[philo->right_fork]);
		}
		else
		{
			pthread_mutex_lock(&philo->table->forks[philo->right_fork]);
			pthread_mutex_lock(&philo->table->forks[philo->left_fork]);
		}
		usleep(philo->table->eat_time);
		philo->death_time = philo->table->clock + philo->table->life_time;
		pthread_mutex_unlock(&philo->table->forks[philo->left_fork]);
		pthread_mutex_unlock(&philo->table->forks[philo->right_fork]);
		printf("%d is Sleeping\n", philo->id);
		usleep(philo->table->sleep_time);
		printf("%d is Thinking\n", philo->id);
	}
	printf("%d has died\n", philo->table->memento_mori);
	return (NULL);
}

void	start_philo(t_table *table)
{
	int	i;

	i = 0;
	table->philo = calloc(table->philo_nbr, sizeof(t_philo));
	while (i < table->philo_nbr)
	{
		table->philo[i].thread = malloc(sizeof(pthread_t));
		table->philo[i].id = i;
		table->philo[i].table = table;
		table->philo[i].left_fork = i;
		table->philo[i].right_fork = (i + 1) % table->philo_nbr;
		table->philo[i].death_time = table->life_time;
		pthread_create(table->philo[i].thread, NULL, existance,
			(void *)&table->philo[i]);
		i++;
	}
	table->memento_mori = 0;
}

int	main(int argc, char **argv)
{
	t_table	*table;

	table = malloc(sizeof(t_table));
	cogito_ergo_sum(table, argv);
	start_philo(table);
	int i = 0;
	while(i < table->philo_nbr)
	{
		pthread_join(*table->philo[i].thread, NULL);
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42lisboa.com>   +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/21 12:31:18 by pfreire-          #+#    #+#             */
/*   Updated: 2025/08/22 12:18:42 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PHILO_H
# define PHILO_H

# include <pthread.h>
# include <stdbool.h>
# include <stdio.h>
# include <stdlib.h>
# include <string.h>
# include <sys/time.h>
# include <unistd.h>

typedef struct s_table	t_table;

typedef struct s_philo
{
	int					id;
	pthread_t			*thread;
	t_table				*table;
	int					left_fork;
	int					right_fork;
	unsigned long int	death_time;
}						t_philo;

typedef struct s_table
{
	t_philo				*philo;
	pthread_mutex_t		*forks;
	int					philo_nbr;
	int					eat_time;
	int					think_time;
	int					sleep_time;
	int					life_time;
	int					cycles;
	unsigned long int	clock;
	int					memento_mori;
	pthread_t			grim_reaper;

}						t_table;

bool					is_only_nbr(char *str);
int						ft_atoi(const char *s);
#endif
