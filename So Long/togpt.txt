/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   aux_func.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 11:21:39 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/09 11:41:54 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

int	firstline(char *map)
{
	int	i;

	i = 0;
	while (map[i] != '\n')
		i++;
	return (i);
}

int	rng(void)
{
	struct timeval	tv;
	struct timeval	tv2;
	int				i;

	gettimeofday(&tv, NULL);
	i = 0;
	while (i < tv.tv_usec)
		i++;
	gettimeofday(&tv2, NULL);
	return (tv.tv_usec * tv2.tv_usec);
}

int	xtile(char *map)
{
	int	i;

	i = 0;
	while (map[i] != '\n')
	{
		i++;
	}
	return (i);
}

int	ytile(char *map)
{
	int	i;
	int	count;

	i = 0;
	count = 0;
	while (map[i] != '\0')
	{
		if (map[i] == '\n')
			count++;
		i++;
	}
	return (count);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cleaner.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 17:53:37 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/11 10:20:49 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   initializer.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 12:59:30 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/14 17:46:34 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	init_player(t_game *s)
{
	s->player.sprite.img_ptr = mlx_xpm_file_to_image(s->mlx_ptr, s->player.anim,
			&s->player.sprite.width, &s->player.sprite.heigth);
	s->player.sprite.img_addr = mlx_get_data_addr(s->player.sprite.img_ptr,
			&s->player.sprite.bpp, &s->player.sprite.l_len,
			&s->player.sprite.endian);
}

t_image	init_tile_base(t_game *s, int i)
{
	t_image	tile;

	tile.img_ptr = which_sprite(s, i);
	tile.img_addr = mlx_get_data_addr(tile.img_ptr, &tile.bpp, &tile.l_len,
			&tile.endian);
	tile.width = 128;
	tile.heigth = 128;
	return (tile);
}

void	fill_tile(t_game *g, t_image *tile, unsigned int color, t_point point)
{
	int	ty;
	int	tx;

	ty = 0;
	while (ty < tile->heigth)
	{
		tx = 0;
		while (tx < tile->width)
		{
			color = pixel_get(tile, tx, ty);
			if ((color >> 24) != 0xFF)
				ft_pixel_put(&g->base, point.x + tx, point.y + ty, color);
			tx++;
		}
		ty++;
	}
}

void	init_base(t_game *s)
{
	int				i;
	t_image			tile;
	t_point			point;
	unsigned int	color;

	i = 0;
	color = 0;
	point.x = 0;
	point.y = 0;
	while (s->map.map[i] != '\0')
	{
		if (s->map.map[i] != '\n')
		{
			tile = init_tile_base(s, i);
			fill_tile(s, &tile, color, point);
			point.x += tile.width;
		}
		else
		{
			point.y += tile.heigth;
			point.x = 0;
		}
		i++;
	}
}

int	char_count(char *s, char c)
{
	int	i;
	int	count;

	count = 0;
	i = 0;
	while (s[i] != '\0')
	{
		if (s[i] == c)
			count++;
		i++;
	}
	if (c == '\0')
		return (1);
	return (count);
}

void	init_collectible(t_collect *s, int x, int y)
{
	s->coord.x = x * 128;
	s->coord.y = y * 128;
	s->active = true;
	s->coord.tile_x = x;
	s->coord.tile_y = y;
}

void	init_collectibles(t_game *s)
{
	int	x;
	int	y;
	int	i;
	int	k;

	s->collectibles.collectible = malloc(sizeof(t_image) * s->collectibles.count);
	x = 0;
	y = 0;
	i = 0;
	k = 0;
	while (s->map.map[i] != '\0')
	{
		if (s->map.map[i] == 'C')
		{
			init_collectible(&s->collectibles.collectible[k], x, y);
			k++;
		}
		x++;
		if (s->map.map[i] == '\n')
		{
			x = 0;
			y++;
		}
		i++;
	}
}

void	init_game(t_game *s)
{
	s->win.ntilesx = xtile(s->map.map);
	s->win.ntilesy = ytile(s->map.map);
	s->win.width = 128 * xtile(s->map.map);
	s->win.height = 128 * ytile(s->map.map);
	s->win.win_ptr = mlx_new_window(s->mlx_ptr, s->win.width, s->win.height,
			"TAE: Metal Gear");
	s->map.grid = ft_split(s->map.map, '\n');
	s->map.map = store_map(s->map.map);
	s->win.frame_buffer.img_ptr = mlx_new_image(s->mlx_ptr, s->win.width,
			s->win.height);
	s->win.frame_buffer.img_addr = mlx_get_data_addr(s->win.frame_buffer.img_ptr,
			&s->win.frame_buffer.bpp, &s->win.frame_buffer.l_len,
			&s->win.frame_buffer.endian);
	s->win.frame_buffer.width = s->win.width;
	s->win.frame_buffer.heigth = s->win.height;
	s->base.img_ptr = mlx_new_image(s->mlx_ptr, s->win.width, s->win.height);
	s->base.img_addr = mlx_get_data_addr(s->base.img_ptr, &s->base.bpp,
			&s->base.l_len, &s->base.endian);
	s->base.width = s->win.width;
	s->base.heigth = s->win.height;
	s->player.coord.x = 0;
	s->player.coord.y = 0;
	s->player.anim = "assets/Boxed_SS1.xpm";
	s->debug_mode = false;
	s->player.moves = 0;
	s->collectibles.count = char_count(s->map.map, 'C');
	init_player(s);
	s->collectibles.sprite.img_ptr = mlx_xpm_file_to_image(s->mlx_ptr, "assets/Ration.xpm", &s->collectibles.sprite.width, &s->collectibles.sprite.heigth);
	s->collectibles.sprite.img_addr = mlx_get_data_addr(s->collectibles.sprite.img_ptr, &s->collectibles.sprite.bpp, &s->collectibles.sprite.l_len, &s->collectibles.sprite.endian);
	init_collectibles(s);
	init_base(s);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 11:13:57 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/14 16:31:50 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	spawn_point(t_game *s)
{
	int	x;
	int	y;
	int	i;

	x = 0;
	i = 0;
	y = 0;
	while (s->map.map[i] != '\0')
	{
		if(s->map.map[i] == 'P')
			break;
		x++;
		if (s->map.map[i] == '\n')
		{
			x = 0;
			y++;
		}
		i++;
	}
	s->player.coord.tile_x = x;
	s->player.coord.tile_y = y;
	s->player.coord.x = (x * 128);
	s->player.coord.y = (y * 128);
}

int	keyloop(int key, t_game *game)
{
	int	x;
	int	y;
	int	f;

	x = game->player.coord.x;
	y = game->player.coord.y;
	f = 0;
	if (key == 'r' && game->debug_mode)
		print_game(game);
	else if (key == 65307)
		close_game(game);
	else if (key == 119)
		return (move_up(game));
	else if (key == 115)
		return (move_down(game));
	else if (key == 97)
		return (move_left(game));
	else if (key == 100)
		return (move_right(game));
	return (0);
}

static int	gameloop(void *param)
{
	t_game	*game;

	game = param;
	mlx_key_hook(game->mlx_ptr, keyloop, game);
	render_frame(game);
	return (0);
}

int	close_game(void *param)
{
	t_game	*game;

	game = param;
	ft_printf("Mission Aborted\n");
	mlx_destroy_image(game->mlx_ptr, game->base.img_ptr);
	mlx_destroy_image(game->mlx_ptr, game->player.sprite.img_ptr);
	// mlx_destroy_image(game->mlx_ptr, game->base.img_ptr);
	// mlx_destroy_image(game->mlx_ptr, game->guards->sprite.img_ptr);
	mlx_destroy_display(game->mlx_ptr);
	// free(game);
	exit(0);
	return (0);
}

bool	debug_mode(char **argv)
{
	if (argv[2])
	{
		if (ft_strcmp(argv[2], "debug_mode=y") == 0)
			return (true);
	}
	return (false);
}

int	main(int argc, char **argv)
{
	t_game	*game;

	if (argc > 3 || argc == 1)
		return (-1);
	game = malloc(sizeof(t_game));
	game->map.map = map_parser(argv);
	if (!is_valid(game->map.map) || (argc == 3 && !debug_mode(argv)))
		return (-1);
	game->mlx_ptr = mlx_init();
	init_game(game);
	if (debug_mode(argv))
		game->debug_mode = true;
	spawn_point(game);
	mlx_hook(game->win.win_ptr, 17, 0, close_game, game);
	mlx_key_hook(game->win.win_ptr, keyloop, game);
	mlx_loop_hook(game->mlx_ptr, gameloop, game);
	mlx_loop(game->mlx_ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   map.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 11:27:22 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/14 14:34:29 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

int	is_top(char *map)
{
	int	i;

	i = 0;
	while (map[i] != '\n')
		i++;
	return (i);
}

bool	is_first_line(char *map, int i)
{
	if ((map[i + 1] == '1' && map[i - 1] == '1') && i < is_top(map))
		return (true);
	return (false);
}

bool	should_put_wall(char *map, int i)
{
	if ((map[i - 1] == '\n' || map[i + 1] == '\n' || map[i + 1] == '\0'
			|| i == 0) || (map[i + 1] == '1' && map[i - 1] == '1'))
		return (true);
	return (false);
}

char	pick_wall(char *map, int i)
{
	if (is_first_line(map, i) && rng() % 7 == 1)
		return ('B');
	else if (is_first_line(map, i) && rng() % 3 == 0)
		return ('M');
	else if (should_put_wall(map, i))
		return ('W');
	else
		return ('X');
}

void	*which_sprite(t_game *s, int i)
{
	int h, w;
	if (s->map.map[i] == 'B')
		return (mlx_xpm_file_to_image(s->mlx_ptr, "assets/walls/Wall3.xpm", &w,
				&h));
	else if (s->map.map[i] == 'M')
		return (mlx_xpm_file_to_image(s->mlx_ptr, "assets/walls/Wall2.xpm", &w,
				&h));
	else if (s->map.map[i] == 'W')
		return (mlx_xpm_file_to_image(s->mlx_ptr, "assets/walls/Wall1.xpm", &w,
				&h));
	else if (s->map.map[i] == 'X')
		return (mlx_xpm_file_to_image(s->mlx_ptr, "assets/Box.xpm", &w, &h));
	else
		return (mlx_xpm_file_to_image(s->mlx_ptr, "assets/ground/Ground.xpm",
				&w, &h));
}

char	pick_ground(char *map, int i)
{
	if (map[i] == '0')
		return ('0');
	return ('0');
}

char	*store_map(char *map)
{
	int i;
	int x;
	int y;
	char *str;
	i = 0;
	x = 0;
	y = 0;
	str = malloc(sizeof(char) * (ft_strlen(map) + 1));
	while (map[i] != '\0')
	{
		if (map[i] == '1')
			str[i] = pick_wall(map, i);
		else if (map[i] == '0')
			str[i] = pick_ground(map, i);
		else
			str[i] = map[i];
		i++;
	}
	str[i] = '\0';
	free(map);
	return (str);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   map_parsing_and_validation.c                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 11:13:00 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/09 11:13:22 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

bool	is_rectangle(char **map)
{
	size_t	i;
	int		j;

	i = ft_strlen(map[0]);
	j = 1;
	while (map[j] != NULL)
	{
		if (i != ft_strlen(map[j]))
			return (false);
		j++;
	}
	return (true);
}

bool	one_word_one(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
		i++;
	return (str[0] == '1' && str[i - 1] == '1');
}

bool	only_ones(char *str)
{
	int	i;
	int size;

	i = 0;
	size = ft_strlen(str);
	while (i < size)
	{
		if (str[i] != '1' && str[i] != '\n')
			return (false);
		i++;
	}
	return (true);
}

bool	is_closed(char *map)
{
	int		i;
	char	**maparr;
	bool	rectangular;

	i = 0;
	maparr = ft_split(map, '\n');
	if (!only_ones(maparr[0]))
		return (false);
	while (maparr[i] != NULL)
	{
		if (!(one_word_one(maparr[i])))
			return (false);
		i++;
	}
	if (!only_ones(maparr[i]))
		return (false);
	rectangular = is_rectangle(maparr);
	return (true && rectangular);
}

bool	at_least_one_collectible(char *map)
{
	int		i;
	bool	flag;

	i = 0;
	flag = false;
	while (map[i] != '\0')
	{
		if (map[i] == 'C')
			flag = true;
		i++;
	}
	return (flag);
}

bool	only_one_player(char *map)
{
	int		i;
	bool	flag;

	i = 0;
	flag = false;
	while (map[i] != '\0')
	{
		if (map[i] == 'P')
		{
			if (flag)
				return (false);
			flag = true;
		}
		i++;
	}
	return (flag);
}

bool	only_one_exit(char *map)
{
	int		i;
	bool	flag;

	i = 0;
	flag = false;
	while (map[i] != '\0')
	{
		if (map[i] == 'E')
		{
			if (flag)
				return (false);
			flag = true;
		}
		i++;
	}
	return (flag);
}

bool	enough_objects(char *map)
{
	return (only_one_exit(map) && only_one_player(map)
		&& at_least_one_collectible(map));
}

bool	good_char(char c)
{
	if (c == 'P' || c == '0' || c == '1' || c == 'E' || c == 'C' || c == 'G'
		|| c == 'S' || c == '\n')
		return (true);
	return (false);
}

bool	no_forbidden_chars(char *map)
{
	int	i;

	i = 0;
	while (map[i] != '\0')
	{
		if (!good_char(map[i]))
			return (false);
		i++;
	}
	return (true);
}

bool	is_valid(char *map)
{
	return (no_forbidden_chars(map) && enough_objects(map) && is_closed(map));
}


char	*map_parser(char **argv)
{
	int		fd;
	char	*temp;
	char	*line;
	char	*map;

	fd = open(argv[1], O_RDONLY);
	if (fd < 0)
		return (NULL);
	map = ft_strdup("");
	while ((line = get_next_line(fd)) != NULL)
	{
		temp = ft_strjoin(map, line);
		free(map);
		map = temp;
		free(line);
	}
	close(fd);
	return (map);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   player.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/11 11:45:24 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/14 17:34:45 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	collected(t_game *s)
{
	t_point	*player;
	t_point	collectibles;
	int		i;

	i = 0;
	player = &s->player.coord;
	while (i < s->collectibles.count)
	{
		collectibles = s->collectibles.collectible[i].coord;
		if (player->tile_x == collectibles.tile_x && player->tile_y == collectibles.tile_y)
		{
			s->collectibles.collectible[i].active = false;
			s->player.collectibles++;
		}
		i++;
		if (i > 1000)
			break ;
	}
}

int	move_up(t_game *s)
{
	int	x;
	int	y;

	x = s->player.coord.x / 128;
	y = s->player.coord.y / 128;
	if (s->map.grid[y - 1][x] != '1')
	{
		s->player.coord.tile_y--;
		s->player.coord.y -= 128;
		s->player.moves++;
		collected(s);
	}
	return (0);
}

int	move_down(t_game *s)
{
	int	x;
	int	y;

	x = s->player.coord.x / 128;
	y = s->player.coord.y / 128;
	if (s->map.grid[y + 1][x] != '1')
	{
		s->player.coord.tile_y++;
		s->player.coord.y += 128;
		s->player.moves++;
		collected(s);
	}
	return (0);
}
int	move_left(t_game *s)
{
	int	x;
	int	y;

	x = s->player.coord.x / 128;
	y = s->player.coord.y / 128;
	if (s->map.grid[y][x - 1] != '1')
	{
		s->player.coord.tile_x--;
		s->player.coord.x -= 128;
		s->player.moves++;
		collected(s);
	}
	return (0);
}
int	move_right(t_game *s)
{
	int	x;
	int	y;

	x = s->player.coord.x / 128;
	y = s->player.coord.y / 128;
	if (s->map.grid[y][x + 1] != '1')
	{
		s->player.coord.tile_x++;
		s->player.coord.x += 128;
		s->player.moves++;
		collected(s);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   rendering.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 14:55:21 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/14 17:45:59 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	render_base_into_buffer(t_game *s)
{
	int				x;
	int				y;
	unsigned int	color;

	y = 0;
	while (y < s->base.heigth)
	{
		x = 0;
		while (x < s->base.width)
		{
			color = pixel_get(&s->base, x, y);
			if ((color >> 24) != 0xFF)
			{
				ft_pixel_put(&s->win.frame_buffer, x, y, color);
			}
			x++;
		}
		y++;
	}
}

void	render_collectible_into_buffer(t_game *g, t_collect *c)
{
	t_point			point;
	unsigned int	color;

	point.y = 0;
	color = 0;
	if (!c->active)
		return ;
	while (point.y < g->collectibles.sprite.heigth)
	{
		point.x = 0;
		while (point.x < g->collectibles.sprite.width)
		{
			color = pixel_get(&g->collectibles.sprite, point.x, point.y);
			if ((color >> 24) != 0xFF)
			{
				ft_pixel_put(&g->win.frame_buffer, c->coord.x + point.x,
					c->coord.y + point.y, color);
			}
			point.x++;
		}
		point.y++;
	}
}

void	render_collectibles_into_buffer(t_game *s)
{
	int	i;

	i = 0;
	while (i < s->collectibles.count)
	{
		render_collectible_into_buffer(s, &s->collectibles.collectible[i]);
		i++;
	}
}

void	render_player_into_buffer(t_game *s)
{
	t_point			point;
	unsigned int	color;

	point.y = 0;
	color = 0;
	while (point.y < s->player.sprite.heigth)
	{
		point.x = 0;
		while (point.x < s->player.sprite.width)
		{
			color = pixel_get(&s->player.sprite, point.x, point.y);
			if ((color >> 24) != 0xFF)
			{
				ft_pixel_put(&s->win.frame_buffer, s->player.coord.x + point.x,
					s->player.coord.y + point.y, color);
			}
			point.x++;
		}
		point.y++;
	}
}

void	clear_frame(t_game *s)
{
	size_t	bytes;

	bytes = (size_t)s->win.frame_buffer.l_len * s->win.frame_buffer.heigth;
	ft_bzero(s->win.frame_buffer.img_addr, bytes);
}

void	render_base_into_fb(t_game *s)
{
	int				x;
	int				y;
	unsigned int	color;

	y = 0;
	while (y < s->win.frame_buffer.heigth)
	{
		x = 0;
		while (x < s->win.frame_buffer.width)
		{
			color = pixel_get(&s->base, x, y);
			ft_pixel_put(&s->win.frame_buffer, x, y, color);
			x++;
		}
		y++;
	}
}

void	render_frame(t_game *s)
{
	clear_frame(s);

	render_base_into_buffer(s);
	render_collectibles_into_buffer(s);
	render_player_into_buffer(s);
	mlx_put_image_to_window(s->mlx_ptr, s->win.win_ptr,
		s->win.frame_buffer.img_ptr, 0, 0);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_func.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 11:42:53 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/14 17:28:20 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	print_point(t_point *p)
{
	ft_printf("  Position:\n");
	ft_printf("    X Coordinate   : %d\n", p->x);
	ft_printf("    Y Coordinate   : %d\n", p->y);
	ft_printf("    Tile X Index   : %d\n", p->tile_x);
	ft_printf("    Tile Y Index   : %d\n", p->tile_y);
}

void	print_image(t_image *img)
{
	ft_printf("    Image Details:\n");
	ft_printf("      Address      : %p\n", img->img_addr);
	ft_printf("      Pointer      : %p\n", img->img_ptr);
	ft_printf("      Width        : %d px\n", img->width);
	ft_printf("      Height       : %d px\n", img->heigth);
	ft_printf("      Bits/Pixel   : %d\n", img->bpp);
	ft_printf("      Line Length  : %d\n", img->l_len);
	ft_printf("      Endian       : %d\n", img->endian);
}

void	print_window(t_window *win)
{
	ft_printf("┌──────── Window ─────────┐\n");
	ft_printf("  Window Pointer : %p\n", win->win_ptr);
	ft_printf("  Dimensions     : %d × %d px\n", win->width, win->height);
	ft_printf("  Tiles (X × Y)  : %d × %d\n", win->ntilesx, win->ntilesy);
	ft_printf("┌─ Frame Buffer ────────┐\n");
	print_image(&win->frame_buffer);
	ft_printf("└───────────────────────┘\n");
	ft_printf("└─────────────────────────┘\n");
}

char	*y_or_n(bool a)
{
	if (a)
		return ("Yes");
	return ("No");
}

void	print_player(t_player *player)
{
	ft_printf("┌────── Player ───────────┐\n");
	print_image(&player->sprite);
	print_point(&player->coord);
	ft_printf("    Boxed         : %s\n", y_or_n(player->boxed));
	ft_printf("    Immune        : %s\n", y_or_n(player->immune));
	ft_printf("    Immunity Time : %.2f s\n", player->immune_time);
	ft_printf("    Collectibles  : %d\n", player->collectibles);
	ft_printf("    Moves         : %d\n", player->moves);
	ft_printf("└─────────────────────────┘\n");
}

void	print_guard(t_guard *guard)
{
	print_image(&guard->sprite);
	print_point(&guard->coord);
	ft_printf("    Stationary    : %s\n", y_or_n(guard->is_stationary));
}

void	print_map(t_map *map)
{
	int	i;

	i = 0;
	ft_printf("┌──────── Map ───────────┐\n");
	ft_printf("  Raw String     :\n%s\n", map->map);
	if (map->grid)
	{
		ft_printf("  Grid Layout:\n");
		while (map->grid[i])
		{
			ft_printf("    %s\n", map->grid[i]);
			i++;
		}
	}
	else
	{
		ft_printf("  Grid Layout    : No Valid Grid\n");
	}
	ft_printf("└─────────────────────────┘\n");
}

void	print_guards(t_game *s)
{
	int	i;

	i = 0;
	if (s->guard_count == 0)
	{
		ft_printf("No Guards to Show\n");
		return ;
	}
	ft_printf("┌──── Guards (%d) ────────┐\n", s->guard_count);
	while (i < s->guard_count)
	{
		ft_printf("  Guard #%d:\n", i + 1);
		print_guard(&s->guards[i]);
		i++;
	}
	ft_printf("└─────────────────────────┘\n");
}

void	print_collectible(t_collect *s)
{
	char	*status;

	status = "Inactive";
	if (s->active)
		status = "Active";
	ft_printf("Active Status: %s\n", status);
	print_point(&s->coord);
}

void	print_collectibles(t_game *s)
{
	int	i;

	i = 0;
	if (s->collectibles.count == 0)
		ft_printf("No Collectibles to Show\n");
	ft_printf("┌─── Collectibles (%d) ────────────┐\n", s->collectibles.count);
	print_image(&s->collectibles.sprite);
	while (i < s->collectibles.count)
	{
		ft_printf("┌─── Collectible #%d───┐\n", i + 1);
		print_collectible(&s->collectibles.collectible[i]);
		ft_printf("└──────────────────────┘\n");
		i++;
	}
	ft_printf("└─────────────────────────────────┘\n");
}

void	print_game(t_game *s)
{
	ft_printf("\n========== GAME STATE ==========\n");
	ft_printf("MLX Context Pointer: %p\n", s->mlx_ptr);
	ft_printf("┌──────── Game Base ──────┐\n");
	print_image(&s->base);
	ft_printf("└─────────────────────────┘\n");
	print_window(&s->win);
	print_map(&s->map);
	print_player(&s->player);
	print_guards(s);
	print_collectibles(s);
	ft_printf("========== END OF DUMP ==========\n\n");
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 16:33:10 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/09 16:33:19 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	ft_pixel_put(t_image *s, int x, int y, unsigned int color)
{
	char	*dest;

	dest = s->img_addr + (y * s->l_len + x * (s->bpp / 8));
	*(unsigned int *)dest = color;
}

int	pixel_get(t_image *data, int x, int y)
{
	char	*dest;

	dest = data->img_addr + (y * data->l_len + x * (data->bpp / 8));
	return (*(unsigned int *)dest);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   so_long.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pfreire- <pfreire-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 10:52:37 by pfreire-          #+#    #+#             */
/*   Updated: 2025/07/14 17:27:46 by pfreire-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft/libft.h"
#include "minilibx/mlx.h"
#include "minilibx/mlx_int.h"
#include <sys/time.h>

typedef struct s_point
{
	int	x;
	int	y;
	int tile_x;
	int tile_y;
}	t_point;

typedef struct s_image
{
	char *img_addr;
	int width;
	int heigth;
	int bpp;
	int l_len;
	int endian;
	int *img_ptr;
}	t_image;

typedef struct s_window
{
	void *win_ptr;
	int	width;
	int	height;
	int ntilesx;
	int ntilesy;
	t_image frame_buffer;
}	t_window;

typedef struct s_map
{
	char *map;
	char **grid;
}	t_map;

typedef struct s_snake
{
	t_image	sprite;
	t_point	coord;
	bool	boxed;
	bool	immune;
	double	immune_time;
	char *anim;
	int collectibles;
	int moves;
}	t_player;

typedef struct s_guard
{
	t_image	sprite;
	t_point	coord;
	bool	is_stationary;
}	t_guard;

typedef struct s_ration
{
	t_point coord;
	bool active;
}	t_collect;

typedef struct s_collectibles
{
	t_collect *collectible;
	t_image	sprite;
	int count;
}	t_collectibles;

typedef struct s_game
{
	bool	debug_mode;
	void *mlx_ptr;
	t_window win;
	t_map	map;
	t_image  base;
	t_player	player;
	t_guard *guards;
	t_collectibles	collectibles;
	int guard_count;
}	t_game;

void print_game(t_game *s);

char	*map_parser(char **argv);
bool	is_valid(char *map);

int	firstline(char *map);
int	rng(void);
int	xtile(char *map);
int	ytile(char *map);


char *store_map(char *map);

void make_window(t_game *s);

void	init_game(t_game *s);
void	init_base(t_game *s);
void	init_player(t_game *s);

void render_frame(t_game *s);

void	*which_sprite(t_game *s, int i);


void	ft_pixel_put(t_image *s, int x, int y, unsigned int color);
int	pixel_get(t_image *data, int x, int y);

int	close_game(void *param);


int move_right(t_game *s);
int move_left(t_game *s);
int move_up(t_game *s);
int move_down(t_game *s);